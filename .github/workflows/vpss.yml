name: Azure Ubuntu (Containers) - Create/Destroy

on:
  workflow_dispatch:
    inputs:
      action:
        description: "create hoặc destroy"
        required: true
        default: "create"
      resourceGroup:
        description: "Resource Group"
        required: true
        default: "rg-ubuntu-containers"
      location:
        description: "Region"
        required: true
        default: "eastasia"
      vmName:
        description: "VM name"
        required: true
        default: "ubnt-b1s-01"
      vmSize:
        description: "VM size (B1s ~ free/very cheap)"
        required: true
        default: "Standard_B1s"
      publicIPSku:
        description: "Public IP SKU"
        required: true
        default: "Standard"
      lockSshToIp:
        description: "IP được phép SSH (đặt * để mở toàn cầu)"
        required: true
        default: "*"

permissions:
  id-token: write
  contents: read

env:
  RG: ${{ github.event.inputs.resourceGroup }}
  LOC: ${{ github.event.inputs.location }}
  VM: ${{ github.event.inputs.vmName }}
  SIZE: ${{ github.event.inputs.vmSize }}
  PIPSKU: ${{ github.event.inputs.publicIPSku }}
  SRCIP: ${{ github.event.inputs.lockSshToIp }}

jobs:
  create:
    if: ${{ github.event.inputs.action == 'create' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- Login: dùng AZURE_CREDENTIALS nếu có, ngược lại dùng OIDC ----
      - name: Azure Login (Service Principal JSON)
        if: ${{ secrets.AZURE_CREDENTIALS != '' }}
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure Login (OIDC)
        if: ${{ secrets.AZURE_CREDENTIALS == '' }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZ_SUBSCRIPTION_ID }}

      - name: Set subscription
        shell: bash
        run: |
          set -euo pipefail
          az account set --subscription "${{ secrets.AZ_SUBSCRIPTION_ID }}"
          az account show -o table

      - name: Create Resource Group
        shell: bash
        run: |
          set -euo pipefail
          az group create --name "$RG" --location "$LOC" -o table

      - name: Create Ubuntu 22.04 VM (B1s)
        id: createvm
        shell: bash
        run: |
          set -euo pipefail
          IMAGE="Canonical:0001-com-ubuntu-server-jammy:22_04-lts-gen2:latest"
          az vm create \
            --resource-group "$RG" \
            --name "$VM" \
            --image "$IMAGE" \
            --size "$SIZE" \
            --admin-username "${{ secrets.ADMIN_USERNAME }}" \
            --admin-password "${{ secrets.ADMIN_PASSWORD }}" \
            --authentication-type password \
            --public-ip-sku "$PIPSKU" \
            --os-disk-size-gb 30 \
            --nsg "" \
            -o json > vm.json

          echo "publicIp=$(jq -r '.publicIpAddress' vm.json)" >> "$GITHUB_OUTPUT"

      - name: Create NSG + allow SSH:22 and HTTP:8080 (for demo)
        shell: bash
        run: |
          set -euo pipefail
          az network nsg create -g "$RG" -n "${VM}-nsg" -l "$LOC" -o none

          # SSH
          az network nsg rule create -g "$RG" --nsg-name "${VM}-nsg" \
            -n allow-ssh-22 --priority 1000 \
            --access Allow --direction Inbound --protocol Tcp \
            --destination-port-ranges 22 \
            --source-address-prefixes "$SRCIP" -o none

          # HTTP demo (Nginx trong container map 8080)
          az network nsg rule create -g "$RG" --nsg-name "${VM}-nsg" \
            -n allow-http-8080 --priority 1010 \
            --access Allow --direction Inbound --protocol Tcp \
            --destination-port-ranges 8080 \
            --source-address-prefixes "$SRCIP" -o none

          NIC_ID=$(az vm show -g "$RG" -n "$VM" --query 'networkProfile.networkInterfaces[0].id' -o tsv)
          NIC_NAME=$(basename "$NIC_ID")
          az network nic update -g "$RG" -n "$NIC_NAME" --network-security-group "${VM}-nsg" -o none

      - name: Prepare setup script (Docker + LXD + demo containers)
        shell: bash
        run: |
          set -euo pipefail
          ADMIN_USER="${{ secrets.ADMIN_USERNAME }}"

          mkdir -p ci
          # ghi script bằng printf để tránh lỗi YAML/heredoc
          printf '%s\n' '#!/usr/bin/env bash' 'set -euo pipefail' \
            'export DEBIAN_FRONTEND=noninteractive' \
            'apt-get update -y' \
            'apt-get install -y docker.io snapd' \
            'systemctl enable --now docker' \
            "usermod -aG docker ${ADMIN_USER}" \
            'snap install core || true' \
            'snap install lxd --channel=5.21/stable' \
            'export PATH=$PATH:/snap/bin' \
            'lxd waitready' \
            'lxd init --auto' \
            "usermod -aG lxd ${ADMIN_USER}" \
            '# demo docker container: nginx on 8080' \
            'docker rm -f webdemo || true' \
            'docker run -d --name webdemo --restart unless-stopped -p 8080:80 nginx:stable' \
            '# demo lxd container: Ubuntu 22.04' \
            'if ! lxc info u1 >/dev/null 2>&1; then lxc launch images:ubuntu/22.04 u1; fi' \
            'sleep 5' \
            "lxc exec u1 -- bash -lc 'apt-get update -y && apt-get install -y nginx && systemctl enable --now nginx || true'" \
            > ci/setup.sh

          chmod +x ci/setup.sh

      - name: Run setup script inside VM
        shell: bash
        run: |
          set -euo pipefail
          az vm run-command invoke \
            -g "$RG" -n "$VM" \
            --command-id RunShellScript \
            --scripts @ci/setup.sh \
            -o table

      - name: Output SSH + test URLs
        shell: bash
        run: |
          IP="${{ steps.createvm.outputs.publicIp }}"
          echo "=== SSH ==="
          echo "ssh ${ADMIN_USER:-${{ secrets.ADMIN_USERNAME }}}@${IP}"
          echo
          echo "=== HTTP demo (Docker Nginx) ==="
          echo "http://${IP}:8080/"
          printf '%s\n' "ssh ${{ secrets.ADMIN_USERNAME }}@${IP}" "http://${IP}:8080/" > out.txt

      - name: Upload connection info
        uses: actions/upload-artifact@v4
        with:
          name: connection-info
          path: out.txt

  destroy:
    if: ${{ github.event.inputs.action == 'destroy' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      # Login 2 chế độ như trên
      - name: Azure Login (Service Principal JSON)
        if: ${{ secrets.AZURE_CREDENTIALS != '' }}
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure Login (OIDC)
        if: ${{ secrets.AZURE_CREDENTIALS == '' }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZ_SUBSCRIPTION_ID }}

      - name: Set subscription
        shell: bash
        run: |
          set -euo pipefail
          az account set --subscription "${{ secrets.AZ_SUBSCRIPTION_ID }}"
          az account show -o table

      - name: Delete resource group
        shell: bash
        run: |
          set -euo pipefail
          az group delete --name "${{ github.event.inputs.resourceGroup }}" --yes --no-wait
          echo "Đã gửi lệnh xóa ${RG}"
